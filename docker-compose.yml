version: '3.8'

services:
  azuredevops-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
      args:
        BUILD_CONFIGURATION: Release
        VERSION: ${VERSION:-latest}
    image: ghcr.io/your-org/azuredevops-mcp:${VERSION:-latest}
    container_name: azuredevops-mcp
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - AZDO_ORGANIZATIONURL=${AZDO_ORGANIZATIONURL}
      - AZDO_PERSONALACCESSTOKEN=${AZDO_PERSONALACCESSTOKEN}
      - TZ=${TZ:-UTC}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    networks:
      - azuredevops-mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.azure-devops-mcp.service=main"
      - "com.azure-devops-mcp.version=${VERSION:-latest}"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis for distributed caching (optional)
  redis:
    image: redis:7-alpine
    container_name: azuredevops-mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-defaultpassword}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    networks:
      - azuredevops-mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    labels:
      - "com.azure-devops-mcp.service=redis"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: azuredevops-mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - azuredevops-mcp-network
    profiles:
      - monitoring
    labels:
      - "com.azure-devops-mcp.service=prometheus"

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: azuredevops-mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - azuredevops-mcp-network
    profiles:
      - monitoring
    labels:
      - "com.azure-devops-mcp.service=grafana"

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  azuredevops-mcp-network:
    driver: bridge
    name: azuredevops-mcp-network