name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore AzureDevOps.MCP.slnx
      
    - name: Build solution
      run: dotnet build AzureDevOps.MCP.slnx --configuration Release --no-restore
      
    - name: Run unit tests
      run: dotnet test AzureDevOps.MCP.slnx --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/**/*'
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        files: '**/coverage.cobertura.xml'
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    permissions:
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore AzureDevOps.MCP.slnx
      
    - name: Run security scan
      run: |
        dotnet tool install --global security-scan --version 5.6.7
        security-scan --project AzureDevOps.MCP.slnx --export sarif --output security-scan-results.sarif
      continue-on-error: true
      
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: security-scan-results.sarif

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_CONFIGURATION=Release
          VERSION=${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # Add your staging deployment logic here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # Add your production deployment logic here

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build release artifacts
      run: |
        dotnet publish src/AzureDevOps.MCP/AzureDevOps.MCP.csproj \
          --configuration Release \
          --runtime linux-x64 \
          --self-contained true \
          --output ./artifacts/linux-x64
          
        dotnet publish src/AzureDevOps.MCP/AzureDevOps.MCP.csproj \
          --configuration Release \
          --runtime win-x64 \
          --self-contained true \
          --output ./artifacts/win-x64
          
        dotnet publish src/AzureDevOps.MCP/AzureDevOps.MCP.csproj \
          --configuration Release \
          --runtime osx-x64 \
          --self-contained true \
          --output ./artifacts/osx-x64
          
    - name: Create archives
      run: |
        cd artifacts
        tar -czf ../azuredevops-mcp-linux-x64.tar.gz linux-x64/
        zip -r ../azuredevops-mcp-win-x64.zip win-x64/
        tar -czf ../azuredevops-mcp-osx-x64.tar.gz osx-x64/
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > CHANGELOG.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./azuredevops-mcp-linux-x64.tar.gz
        asset_name: azuredevops-mcp-linux-x64.tar.gz
        asset_content_type: application/gzip